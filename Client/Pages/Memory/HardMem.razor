@page "/hardMem"

@code{
    int numberOfCards = 36;
	List<int> cards = new List<int>();
	int[] cardArray = new int[36];
	List<int> clickedCards = new List<int>();
	List<int> matchedCards = new List<int>();

	protected override void OnInitialized()
	{
		for (int i = 1; i <= numberOfCards / 2; i++)
		{
			cards.Add(i);
			cards.Add(i);
		}

		for (int i = 0; i < numberOfCards; i++)
		{
			Random random = new Random();
			int randomNumber = random.Next(0, cards.Count - 1);
			cardArray[i] = cards[randomNumber];
			cards.RemoveAt(randomNumber);
		}
    }
    void CardClicked(int index)
	{
		if (clickedCards.Count == 2)
			return;
		clickedCards.Add(index);

		Task.Delay(1000).ContinueWith((t) =>
		{
			if (clickedCards.Count == 2)
			{
				int num1 = cardArray[clickedCards[0]];
				int num2 = cardArray[clickedCards[1]];

				if (num1 == num2)
				{
					matchedCards.Add(clickedCards[0]);
					matchedCards.Add(clickedCards[1]);
				}

				clickedCards.Clear();
				StateHasChanged();
			}
		});

	}
}

<PageTitle>Memory: Hard difficulty</PageTitle>

<h1 style="text-align: center; font-size: 2rem; font-weight: bold;">Find all 16 pairs!</h1>

<div class="mem-box">
	<div class="memory-grid">
		@for (int index = 0; index < cardArray.Length; index++)
		{
			int localIndex = index;
			int card = cardArray[index];
			if (matchedCards.Contains(index))
			{
				<div class="found"></div>
			}
			else
			{
				<div @onclick="() => CardClicked(localIndex)">
					<span hidden="@(!clickedCards.Contains(localIndex))">@card</span>
				</div>
			}
		}
	</div>
</div>

<style>
	.mem-box{
		height: 450px;
		width: 450px;
		margin: auto;
	}

	ï»¿.memory-grid {
		display: inline-grid;
	}

	.memory-grid > div {
		height: 75px;
		width: 75px;
		background-color: violet;
		border: 1px solid white;
		color: black;
		display: inline-grid;
		justify-content: center;
		align-items: center;
		font: 50px bold;
	}

	.memory-grid > div.found {
		background: greenyellow;
	}
</style>